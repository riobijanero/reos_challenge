// Mocks generated by Mockito 5.3.0 from annotations
// in reos_challenge/test/shared/providers/book_provider_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:reos_challenge/shared/models/models.dart' as _i2;
import 'package:reos_challenge/shared/repositories/fake_repository/fake_repository.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBook_0 extends _i1.SmartFake implements _i2.Book {
  _FakeBook_0(Object parent, Invocation parentInvocation) : super(parent, parentInvocation);
}

/// A class which mocks [FakeRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFakeRepository extends _i1.Mock implements _i3.FakeRepository {
  MockFakeRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Book>> searchBooks(String? searchTerm) =>
      (super.noSuchMethod(Invocation.method(#searchBooks, [searchTerm]),
          returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[])) as _i4.Future<List<_i2.Book>>);
  @override
  _i4.Future<List<_i2.Book>> searchAuthors(String? searchTerm) =>
      (super.noSuchMethod(Invocation.method(#searchAuthors, [searchTerm]),
          returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[])) as _i4.Future<List<_i2.Book>>);
  @override
  _i4.Future<List<_i2.Book>> fetchContinueBookList() =>
      (super.noSuchMethod(Invocation.method(#fetchContinueBookList, []),
          returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[])) as _i4.Future<List<_i2.Book>>);
  @override
  _i4.Future<List<_i2.Book>> fetchNewBookList() => (super.noSuchMethod(Invocation.method(#fetchNewBookList, []),
      returnValue: _i4.Future<List<_i2.Book>>.value(<_i2.Book>[])) as _i4.Future<List<_i2.Book>>);
  @override
  _i4.Future<_i2.Book> searchBookById(String? id) => (super.noSuchMethod(Invocation.method(#searchBookById, [id]),
          returnValue: _i4.Future<_i2.Book>.value(_FakeBook_0(this, Invocation.method(#searchBookById, [id]))))
      as _i4.Future<_i2.Book>);
}
